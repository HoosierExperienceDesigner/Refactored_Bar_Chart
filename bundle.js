(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const csvUrl =
    'https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv';


  const useData = () => {
    
     const [data, setData] = React$1.useState(null);
    
     React$1.useEffect(() => {
      const row = d => {
        d.Population = +d['2020'];
        return d;
      };
      d3.csv(csvUrl, row).then(data => {
        setData(data.slice(0, 10));
      });
    }, []);
    
    return data;
  };

  const AxisBottom = ({xScale, innerHeight}) => 
         xScale.ticks().map(tickValue => (
            React.createElement( 'g', { key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
              React.createElement( 'line', { y2: innerHeight, stroke: "black" }),
              React.createElement( 'text', {
                style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + 3 },
                tickValue
              )
            )
          ));

  const AxisLeft = ({yScale}) => 
  yScale.domain().map(tickValue => (
            React.createElement( 'text', {
              key: tickValue, style: { textAnchor: 'end' }, x: -3, dy: ".32em", y: yScale(tickValue) + yScale.bandwidth() / 2 },
              tickValue
            )
          ));

  const Marks = ({data, xScale, yScale, xValue, yValue}) => 
  data.map(d => (
            React.createElement( 'rect', {
              key: yValue(d), x: 0, y: yScale(yValue(d)), width: xScale(xValue(d)), height: yScale.bandwidth() })
          ));

  const width = 960;
  const height = 500;
  const margin = { top: 20, right: 20, bottom: 20, left: 200 };

  const App = () => {
    const data = useData();
    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;
    
    //This needs to be built in a way that it can change dynamically for different data sets 
    const yValue = d =>d.Country; 
    const xValue = d =>d.Population;

    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight]);

    const xScale = d3.scaleLinear()
      .domain([0, d3.max(data, xValue)])
      .range([0, innerWidth]);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          
          React$1__default.createElement( AxisBottom, { 
            xScale: xScale, innerHeight: innerHeight }),
          React$1__default.createElement( AxisLeft, { 
            yScale: yScale }),  
          React$1__default.createElement( Marks, {
            data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue })
          
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInVzZURhdGEuanMiLCJBeGlzQm90dG9tLmpzIiwiQXhpc0xlZnQuanMiLCJNYXJrcy5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3N2IH0gZnJvbSAnZDMnO1xuXG5jb25zdCBjc3ZVcmwgPVxuICAnaHR0cHM6Ly9naXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jdXJyYW4vMGFjNDA3N2M3ZmM2MzkwZjVkZDMzYmY1YzA2Y2I1ZmYvcmF3LzYwNWM1NDA4MGM3YTkzYTQxN2EzY2VhOTNmZDUyZTc1NTBlNzY1MDAvVU5fUG9wdWxhdGlvbl8yMDE5LmNzdic7XG5cblxuZXhwb3J0IGNvbnN0IHVzZURhdGEgPSAoKSA9PiB7XG4gIFxuICAgY29uc3QgW2RhdGEsIHNldERhdGFdID0gdXNlU3RhdGUobnVsbCk7XG4gIFxuICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCByb3cgPSBkID0+IHtcbiAgICAgIGQuUG9wdWxhdGlvbiA9ICtkWycyMDIwJ107XG4gICAgICByZXR1cm4gZDtcbiAgICB9O1xuICAgIGNzdihjc3ZVcmwsIHJvdykudGhlbihkYXRhID0+IHtcbiAgICAgIHNldERhdGEoZGF0YS5zbGljZSgwLCAxMCkpO1xuICAgIH0pO1xuICB9LCBbXSk7XG4gIFxuICByZXR1cm4gZGF0YTtcbn07IiwiZXhwb3J0IGNvbnN0IEF4aXNCb3R0b20gPSAoe3hTY2FsZSwgaW5uZXJIZWlnaHR9KSA9PiBcbiAgICAgICB4U2NhbGUudGlja3MoKS5tYXAodGlja1ZhbHVlID0+IChcbiAgICAgICAgICA8ZyBrZXk9e3RpY2tWYWx1ZX0gdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7eFNjYWxlKHRpY2tWYWx1ZSl9LDApYH0+XG4gICAgICAgICAgICA8bGluZSB5Mj17aW5uZXJIZWlnaHR9IHN0cm9rZT1cImJsYWNrXCIgLz5cbiAgICAgICAgICAgIDx0ZXh0XG4gICAgICAgICAgICAgIHN0eWxlPXt7IHRleHRBbmNob3I6ICdtaWRkbGUnIH19XG4gICAgICAgICAgICAgIGR5PVwiLjcxZW1cIlxuICAgICAgICAgICAgICB5PXtpbm5lckhlaWdodCArIDN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0aWNrVmFsdWV9XG4gICAgICAgICAgICA8L3RleHQ+XG4gICAgICAgICAgPC9nPlxuICAgICAgICApKTsiLCJleHBvcnQgY29uc3QgQXhpc0xlZnQgPSAoe3lTY2FsZX0pID0+IFxueVNjYWxlLmRvbWFpbigpLm1hcCh0aWNrVmFsdWUgPT4gKFxuICAgICAgICAgIDx0ZXh0XG4gICAgICAgICAgICBrZXk9e3RpY2tWYWx1ZX1cbiAgICAgICAgICAgIHN0eWxlPXt7IHRleHRBbmNob3I6ICdlbmQnIH19XG4gICAgICAgICAgICB4PXstM31cbiAgICAgICAgICAgIGR5PVwiLjMyZW1cIlxuICAgICAgICAgICAgeT17eVNjYWxlKHRpY2tWYWx1ZSkgKyB5U2NhbGUuYmFuZHdpZHRoKCkgLyAyfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aWNrVmFsdWV9XG4gICAgICAgICAgPC90ZXh0PlxuICAgICAgICApKTsiLCJleHBvcnQgY29uc3QgTWFya3MgPSAoe2RhdGEsIHhTY2FsZSwgeVNjYWxlLCB4VmFsdWUsIHlWYWx1ZX0pID0+IFxuZGF0YS5tYXAoZCA9PiAoXG4gICAgICAgICAgPHJlY3RcbiAgICAgICAgICAgIGtleT17eVZhbHVlKGQpfVxuICAgICAgICAgICAgeD17MH1cbiAgICAgICAgICAgIHk9e3lTY2FsZSh5VmFsdWUoZCkpfVxuICAgICAgICAgICAgd2lkdGg9e3hTY2FsZSh4VmFsdWUoZCkpfVxuICAgICAgICAgICAgaGVpZ2h0PXt5U2NhbGUuYmFuZHdpZHRoKCl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSk7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBjc3YsIGFyYywgcGllLCBzY2FsZUJhbmQsIHNjYWxlTGluZWFyLCBtYXggfSBmcm9tICdkMyc7XG5pbXBvcnQgeyB1c2VEYXRhIH0gZnJvbSAnLi91c2VEYXRhLmpzJztcbmltcG9ydCB7IEF4aXNCb3R0b219IGZyb20gJy4vQXhpc0JvdHRvbS5qcyc7XG5pbXBvcnQgeyBBeGlzTGVmdCB9IGZyb20gJy4vQXhpc0xlZnQnO1xuaW1wb3J0IHsgTWFya3MgfSBmcm9tICcuL01hcmtzLmpzJztcblxuY29uc3Qgd2lkdGggPSA5NjA7XG5jb25zdCBoZWlnaHQgPSA1MDA7XG5jb25zdCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAyMCwgbGVmdDogMjAwIH07XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgY29uc3QgZGF0YSA9IHVzZURhdGEoKTtcbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuIDxwcmU+TG9hZGluZy4uLjwvcHJlPjtcbiAgfVxuXG4gIGNvbnN0IGlubmVySGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBcbiAgLy9UaGlzIG5lZWRzIHRvIGJlIGJ1aWx0IGluIGEgd2F5IHRoYXQgaXQgY2FuIGNoYW5nZSBkeW5hbWljYWxseSBmb3IgZGlmZmVyZW50IGRhdGEgc2V0cyBcbiAgY29uc3QgeVZhbHVlID0gZCA9PmQuQ291bnRyeTsgXG4gIGNvbnN0IHhWYWx1ZSA9IGQgPT5kLlBvcHVsYXRpb247XG5cbiAgY29uc3QgeVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAuZG9tYWluKGRhdGEubWFwKHlWYWx1ZSkpXG4gICAgLnJhbmdlKFswLCBpbm5lckhlaWdodF0pO1xuXG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKFswLCBtYXgoZGF0YSwgeFZhbHVlKV0pXG4gICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnIHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9PlxuICAgICAgPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYH0+XG4gICAgICAgIFxuICAgICAgICA8QXhpc0JvdHRvbSBcbiAgICAgICAgICB4U2NhbGU9e3hTY2FsZX1cbiAgICAgICAgICBpbm5lckhlaWdodD17aW5uZXJIZWlnaHR9XG4gICAgICAgIC8+XG4gICAgICAgIDxBeGlzTGVmdCBcbiAgICAgICAgICB5U2NhbGU9e3lTY2FsZX1cbiAgICAgICAgLz4gXG4gICAgICAgIDxNYXJrc1xuICAgICAgICAgIGRhdGE9e2RhdGF9XG4gICAgICAgICAgeFNjYWxlPXt4U2NhbGV9XG4gICAgICAgICAgeVNjYWxlPXt5U2NhbGV9XG4gICAgICAgICAgeFZhbHVlPXt4VmFsdWV9XG4gICAgICAgICAgeVZhbHVlPXt5VmFsdWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgXG4gICAgICA8L2c+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIHJvb3RFbGVtZW50KTtcbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImNzdiIsIlJlYWN0Iiwic2NhbGVCYW5kIiwic2NhbGVMaW5lYXIiLCJtYXgiXSwibWFwcGluZ3MiOiI7Ozs7OztFQUdBLE1BQU0sTUFBTTtFQUNaLEVBQUUsZ0pBQWdKLENBQUM7QUFDbko7QUFDQTtFQUNPLE1BQU0sT0FBTyxHQUFHLE1BQU07RUFDN0I7RUFDQSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxD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